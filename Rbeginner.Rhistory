a <- 1
b <- 1
c <- -1
a
print(a)
ls()
x
(-b + sqrt(b^2 - 4*a*c))/(2*a)
ls
ls()
log(8)
log(a)
exp(1)
log(exp(1))
help("log")
?log
args(log)
help("+")
data(heights)
source('~/heights.R', echo=TRUE)
data(heights)
force(heights)
class(75.00000)
class(heights$height)
class(heights$height)
heights$sex[777]
heights[1, 777]
heights[777,1]
n <- 1000
x <- seq(1,n)
sum(x)
help("sum")
help("seq")
class(murders)
str(murders)
head(murders)
log4(1024)
help("log")
log(1024, 4)
2x2−x−4=0
library(dslabs)
data(movielens)
str(movielens)
nlevels(movielens$genres)
# Constructing Quadratic Formula
result <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
else if(delta(a,b,c) == 0){ # second case D=0
x = -b/(2*a)
}
else {"There are no real roots."} # third case D<0
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
}
str(heights)
max(heights$height)
min(heights$height)
heights$height[50]
which.min(heights$height)
mean(heights$height)
median(heights$height)
table(heights$sex)
prop.table(heights$sex)
table(heights$sex)
812+238
812/238
812/1050
count <- 0
table(heights$height)
sum(heights$height > 78)
f <- heights[height]
f <- heights$height
f
sum(heights$height > 78 && heights$sex == "Female")
sum(heights$height > 78 && heights$sex == "Male")
sum(heights$sex == "Female")
sum(heights$height > 78 & heights$sex == "Female")
sum(heights$height > 78 & heights$sex == "Male")
source('~/.active-rstudio-document', echo=TRUE)
y <- heights$sex
x <- heights$height
library(dslabs)
library(caret)
set.seed(2)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = False)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
sample.kind = "Rounding"
library(caret)
library(dslabs)
install.packages("caret", dependencies = TRUE)
library(caret)
library(caret)
set.seed(2, sample.kind = "Rounding")
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
set.seed(2)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
train_set <- heights[-test_index, ]
test_set <- heights[-test_index, ]
# guess the outcome
y_hat <- sample(c("Male", "Female"), length(test_index), replace = TRUE)
y_hat <- sample(c("Male", "Female"), length(test_index), replace = TRUE) %>%
factor(levels = levels(test_set$sex))
y_hat <- sample(c("Male", "Female"), length(test_index), replace = TRUE)
y_hat <- sample(c("Male", "Female"), length(test_index), replace = TRUE) %>%
factor(levels = levels(test_set$sex))
set.seed(2)
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
train_set <- heights[-test_index, ]
test_set <- heights[-test_index, ]
# guess the outcome
y_hat <- sample(c("Male", "Female"), length(test_index), replace = TRUE)
y_hat <- sample(c("Male", "Female"), length(test_index), replace = TRUE) %>%
factor(levels = levels(test_set$sex))
# compute accuracy
mean(y_hat == test_set$sex)
heights %>% group_by(sex) %>% summarize(mean(height), sd(height))
read_mnist()
str(mnist)
data(mnist)
ncol(mnist)
ncol(read_mnist())
ncol(mnist)
ncol(mnist())
mnist <- read_mnist()
ncol(mnist)
ncol(mnist$train$images)
confusionMatrix(data = y_hat, reference = test_set$sex)
source('~/.active-rstudio-document', echo=TRUE)
y
x
table(x)
table(y)
dat %>% group_by(type) %>% summarize(prop_female = mean(sex == "Female"))
y_hat <- ifelse(x == "online", "Male", "Female") %>%
factor(levels = levels(y))
mean(y_hat==y)
table(y_hat, y)
table(y, x)
sensitivity(y_hat, y)
specificity(y_hat, y)
mean(y == "Female")
source('~/.active-rstudio-document', echo=TRUE)
library(caret)
set.seed(2)
test_index <- createDataPartition(y,times=1,p=0.5,list=FALSE)
test <- iris[test_index,]
train <- iris[-test_index,]
func <- function(x){
rangedValues <- seq(range(x)[1],range(x)[2],by=0.1)
sapply(rangedValues,function(i){
y_hat <- ifelse(x>i,'virginica','versicolor')
mean(y_hat==train$Species)
})
}
predictions <- apply(train[,-5],2,func)
sapply(predictions,max)
```
- Sepal.Length
- Sepal.Width
- Petal.Length [X]
- Petal.Width
predictions <- func(train[,3])
rangedValues <- seq(range(train[,3])[1],range(train[,3])[2],by=0.1)
cutoffs <-rangedValues[which(predictions==max(predictions))]
y_hat <- ifelse(test[,3]>cutoffs[1],'virginica','versicolor')
mean(y_hat==test$Species)
func <- function(x){
rangedValues <- seq(range(x)[1],range(x)[2],by=0.1)
sapply(rangedValues,function(i){
y_hat <- ifelse(x>i,'virginica','versicolor')
mean(y_hat==train$Species)
})
}
predictions <- apply(test[,-5],2,func)
sapply(predictions,max)
plot(iris,pch=21,bg=iris$Species)
library(caret)
library(dplyr)
data(iris)
iris <- iris[-which(iris$Species=='setosa'),]
y <- iris$Species
plot(iris,pch=21,bg=iris$Species)
set.seed(2)
test_index <- createDataPartition(y,times=1,p=0.5,list=FALSE)
test <- iris[test_index,]
train <- iris[-test_index,]
petalLengthRange <- seq(range(train[,3])[1],range(train[,3])[2],by=0.1)
petalWidthRange <- seq(range(train[,4])[1],range(train[,4])[2],by=0.1)
cutoffs <- expand.grid(petalLengthRange,petalWidthRange)
id <- sapply(seq(nrow(cutoffs)),function(i){
y_hat <- ifelse(train[,3]>cutoffs[i,1] | train[,4]>cutoffs[i,2],'virginica','versicolor')
mean(y_hat==train$Species)
}) %>% which.max
optimalCutoff <- cutoffs[id,] %>% as.numeric
y_hat <- ifelse(test[,3]>optimalCutoff[1] & test[,4]>optimalCutoff[2],'virginica','versicolor')
mean(y_hat==test$Species)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
$\ P(\text{disease} | \text{test}+) = P(\text{test}+ | \text{disease}) \times \frac{P(\text{disease})}{P(\text{test}+)} = \frac{P(\text{test}+ | \text{disease})P(\text{disease})}{P(\text{test}+ | \text{disease})P(\text{disease})+P(\text{test}+ | \text{healthy})P(\text{healthy})]} = \frac{0.85 \times 0.02}{0.85 \times 0.02 + 0.1 \times 0.98} = 0.1478261$
set.seed(1) # if using R 3.6 or later
$\ P(\text{disease} | \text{test}+) = P(\text{test}+ | \text{disease}) \times \frac{P(\text{disease})}{P(\text{test}+)} = \frac{P(\text{test}+ | \text{disease})P(\text{disease})}{P(\text{test}+ | \text{disease})P(\text{disease})+P(\text{test}+ | \text{healthy})P(\text{healthy})]} = \frac{0.85 \times 0.02}{0.85 \times 0.02 + 0.1 \times 0.98} = 0.1478261$
set.seed(1) # if using R 3.6 or later
$\ P(\text{disease} | \text{test}+) = P(\text{test}+ | \text{disease}) \times \frac{P(\text{disease})}{P(\text{test}+)} = \frac{P(\text{test}+ | \text{disease})P(\text{disease})}{P(\text{test}+ | \text{disease})P(\text{disease})+P(\text{test}+ | \text{healthy})P(\text{healthy})]} = \frac{0.85 \times 0.02}{0.85 \times 0.02 + 0.1 \times 0.98} = 0.1478261$
set.seed(1) # if using R 3.6 or later
$\ P(\text{disease}) = 0.02$
$\ P(\text{disease}) = 0.02$
$\ P(\text{disease}) = 0.02$
$\ P(\text{disease} | \text{test}+) = P(\text{test}+ | \text{disease}) \times \frac{P(\text{disease})}{P(\text{test}+)} = \frac{P(\text{test}+ | \text{disease})P(\text{disease})}{P(\text{test}+ | \text{disease})P(\text{disease})+P(\text{test}+ | \text{healthy})P(\text{healthy})]} = \frac{0.85 \times 0.02}{0.85 \times 0.02 + 0.1 \times 0.98} = 0.1478261$
$\ P(\text{disease}) = 0.02$
$\ P(\text{disease}) = 0.02$
$\ P(\text{disease}) = 0.02$
$\ P(\text{disease} | \text{test}+) = P(\text{test}+ | \text{disease}) \times \frac{P(\text{disease})}{P(\text{test}+)} = \frac{P(\text{test}+ | \text{disease})P(\text{disease})}{P(\text{test}+ | \text{disease})P(\text{disease})+P(\text{test}+ | \text{healthy})P(\text{healthy})]} = \frac{0.85 \times 0.02}{0.85 \times 0.02 + 0.1 \times 0.98} = 0.1478261$
set.seed(1) # if using R 3.6 or later
P(\text{disease}) = 0.02$
$\ P(\text{disease}) = 0.02$
$\ P(\text{disease}) = 0.02$
$\ P(\text{disease} | \text{test}+) = P(\text{test}+ | \text{disease}) \times \frac{P(\text{disease})}{P(\text{test}+)} = \frac{P(\text{test}+ | \text{disease})P(\text{disease})}{P(\text{test}+ | \text{disease})P(\text{disease})+P(\text{test}+ | \text{healthy})P(\text{healthy})]} = \frac{0.85 \times 0.02}{0.85 \times 0.02 + 0.1 \times 0.98} = 0.1478261$
set.seed(1) # if using R 3.6 or later
source('~/.active-rstudio-document', echo=TRUE)
mean(test)
mean(disease[test==0])
mean(disease[test==1]==1)
mean(disease[test==1]==1)/mean(disease==1)
(-b + sqrt(b^2 - 4*a*c) ) / ( 2*a )
save.image("~/RAndMachineLearningBasics.rda.RData")
?Comparison
save.image("~/R/RBasicsSection2.RData")
# We may create vectors of class numeric or character with the concatenate function
codes <- c(380, 124, 818)
country <- c("italy", "canada", "egypt")
names(codes) <- country
codes
seq(1,10)
seq(1,10,2)
1:10
codes[c(1:3)]
codes[c(1,3)]
library(tidyverse)
library(dslabs)
data(murders)
index <- order(murders$total)
murders$abb[index]
max(murders$total)
i_max <- which.max(murders$total)
i_max
murders$state[i_max]
